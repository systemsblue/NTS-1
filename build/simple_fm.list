
build/simple_fm.elf:     file format elf32-littlearm


Disassembly of section .text:

20000040 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000040:	4770      	bx	lr

20000042 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000042:	4770      	bx	lr

20000044 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000044:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
20000046:	4770      	bx	lr
20000048:	4770      	bx	lr
2000004a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2000004c:	4770      	bx	lr

2000004e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2000004e:	4b10      	ldr	r3, [pc, #64]	; (20000090 <_entry+0x42>)
20000050:	4a10      	ldr	r2, [pc, #64]	; (20000094 <_entry+0x46>)
20000052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000056:	4688      	mov	r8, r1
20000058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2000005c:	4293      	cmp	r3, r2
2000005e:	d002      	beq.n	20000066 <_entry+0x18>
    *(bss_p++) = 0;
20000060:	f803 1f01 	strb.w	r1, [r3, #1]!
20000064:	e7fa      	b.n	2000005c <_entry+0xe>
20000066:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <_entry+0x4a>)
20000068:	4c0c      	ldr	r4, [pc, #48]	; (2000009c <_entry+0x4e>)
2000006a:	1ae4      	subs	r4, r4, r3
2000006c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000006e:	2500      	movs	r5, #0
20000070:	461e      	mov	r6, r3
20000072:	42a5      	cmp	r5, r4
20000074:	d005      	beq.n	20000082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20000076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007a:	b103      	cbz	r3, 2000007e <_entry+0x30>
      init_p();
2000007c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000007e:	3501      	adds	r5, #1
20000080:	e7f7      	b.n	20000072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000082:	4641      	mov	r1, r8
20000084:	4638      	mov	r0, r7
20000086:	f000 f80b 	bl	200000a0 <_hook_init>
2000008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000008e:	bf00      	nop
20000090:	20000507 	.word	0x20000507
20000094:	2000053b 	.word	0x2000053b
20000098:	20000040 	.word	0x20000040
2000009c:	20000040 	.word	0x20000040

200000a0 <_hook_init>:
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.w0    = 0.f;
200000a0:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <_hook_init+0x28>)
200000a2:	2100      	movs	r1, #0
  s_state.phase = 0.f;
  s_state.drive = 1.f;
200000a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.w0    = 0.f;
200000a8:	6019      	str	r1, [r3, #0]
  s_state.phase = 0.f;
200000aa:	6059      	str	r1, [r3, #4]
  s_state.drive = 1.f;
  s_state.dist  = 0.f;
200000ac:	60d9      	str	r1, [r3, #12]
  s_state.lfo = s_state.lfoz = 0.f;
200000ae:	6159      	str	r1, [r3, #20]
200000b0:	6119      	str	r1, [r3, #16]
  s_state.flags = k_flags_none;
200000b2:	2100      	movs	r1, #0

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.w0    = 0.f;
  s_state.phase = 0.f;
  s_state.drive = 1.f;
200000b4:	609a      	str	r2, [r3, #8]
  s_state.dist  = 0.f;
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
200000b6:	7619      	strb	r1, [r3, #24]
  s_state.p1 = 1.f;
200000b8:	61da      	str	r2, [r3, #28]
  s_state.p2 = 1.f;
200000ba:	621a      	str	r2, [r3, #32]
  s_state.p3 = 1.f;
200000bc:	625a      	str	r2, [r3, #36]	; 0x24
  s_state.p4 = 1.f;
200000be:	629a      	str	r2, [r3, #40]	; 0x28
  s_state.p5 = 1.f;
200000c0:	62da      	str	r2, [r3, #44]	; 0x2c
  s_state.p6 = 1.f;
200000c2:	631a      	str	r2, [r3, #48]	; 0x30
200000c4:	4770      	bx	lr
200000c6:	bf00      	nop
200000c8:	20000508 	.word	0x20000508

200000cc <_hook_cycle>:
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000cc:	b5f0      	push	{r4, r5, r6, r7, lr}
200000ce:	ed2d 8b04 	vpush	{d8-d9}
  const uint8_t flags = s_state.flags;
200000d2:	4b9d      	ldr	r3, [pc, #628]	; (20000348 <_hook_cycle+0x27c>)
  s_state.flags = k_flags_none;
  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
200000d4:	8885      	ldrh	r5, [r0, #4]

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
200000d6:	7e1e      	ldrb	r6, [r3, #24]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000d8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 2000034c <_hook_cycle+0x280>
  s_state.flags = k_flags_none;
  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
  float phase = (flags & k_flag_reset) ? 0.f : s_state.phase;
  
  const float drive = s_state.drive;
200000dc:	edd3 0a02 	vldr	s1, [r3, #8]
  const float dist  = s_state.dist;
200000e0:	ed93 4a03 	vldr	s8, [r3, #12]
  const float p1    = s_state.p1;
200000e4:	ed93 0a07 	vldr	s0, [r3, #28]
  const float p2    = s_state.p2;
200000e8:	ed93 8a08 	vldr	s16, [r3, #32]
  const float p3    = s_state.p3;
200000ec:	edd3 3a09 	vldr	s7, [r3, #36]	; 0x24
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
200000f0:	2400      	movs	r4, #0
200000f2:	761c      	strb	r4, [r3, #24]
  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
200000f4:	122c      	asrs	r4, r5, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000f6:	2c96      	cmp	r4, #150	; 0x96
200000f8:	bfd8      	it	le
200000fa:	4627      	movle	r7, r4
200000fc:	b2ed      	uxtb	r5, r5
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000fe:	f104 0401 	add.w	r4, r4, #1
20000102:	b2e4      	uxtb	r4, r4
20000104:	ee07 5a90 	vmov	s15, r5
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000108:	bfc8      	it	gt
2000010a:	2797      	movgt	r7, #151	; 0x97
2000010c:	4d90      	ldr	r5, [pc, #576]	; (20000350 <_hook_cycle+0x284>)
2000010e:	2c96      	cmp	r4, #150	; 0x96
20000110:	bf88      	it	hi
20000112:	2497      	movhi	r4, #151	; 0x97
20000114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000118:	eb05 0787 	add.w	r7, r5, r7, lsl #2
2000011c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
20000120:	ee67 7a87 	vmul.f32	s15, s15, s14
20000124:	edd7 5a00 	vldr	s11, [r7]
20000128:	ed94 7a00 	vldr	s14, [r4]
2000012c:	ee37 7a65 	vsub.f32	s14, s14, s11
20000130:	eee7 5a87 	vfma.f32	s11, s15, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000134:	eddf 7a87 	vldr	s15, [pc, #540]	; 20000354 <_hook_cycle+0x288>
20000138:	eef4 5ae7 	vcmpe.f32	s11, s15
2000013c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000140:	bfa8      	it	ge
20000142:	eef0 5a67 	vmovge.f32	s11, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000146:	eddf 7a84 	vldr	s15, [pc, #528]	; 20000358 <_hook_cycle+0x28c>
2000014a:	ee65 5aa7 	vmul.f32	s11, s11, s15
  const float dist  = s_state.dist;
  const float p1    = s_state.p1;
  const float p2    = s_state.p2;
  const float p3    = s_state.p3;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
2000014e:	edd0 7a00 	vldr	s15, [r0]
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
20000152:	edc3 5a00 	vstr	s11, [r3]
  const float dist  = s_state.dist;
  const float p1    = s_state.p1;
  const float p2    = s_state.p2;
  const float p3    = s_state.p3;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
20000156:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
  float phase = (flags & k_flag_reset) ? 0.f : s_state.phase;
2000015a:	f016 0601 	ands.w	r6, r6, #1
2000015e:	bf0c      	ite	eq
20000160:	ed93 6a01 	vldreq	s12, [r3, #4]
20000164:	ed9f 6a7d 	vldrne	s12, [pc, #500]	; 2000035c <_hook_cycle+0x290>
  const float dist  = s_state.dist;
  const float p1    = s_state.p1;
  const float p2    = s_state.p2;
  const float p3    = s_state.p3;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
20000168:	edc3 7a04 	vstr	s15, [r3, #16]
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
2000016c:	b91e      	cbnz	r6, 20000176 <_hook_cycle+0xaa>
2000016e:	4876      	ldr	r0, [pc, #472]	; (20000348 <_hook_cycle+0x27c>)
20000170:	ed90 5a05 	vldr	s10, [r0, #20]
20000174:	e001      	b.n	2000017a <_hook_cycle+0xae>
20000176:	eeb0 5a67 	vmov.f32	s10, s15
  const float lfo_inc = (lfo - lfoz) / frames;
2000017a:	ee07 2a10 	vmov	s14, r2
2000017e:	ee77 7ac5 	vsub.f32	s15, s15, s10
20000182:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000186:	ed9f 3a76 	vldr	s6, [pc, #472]	; 20000360 <_hook_cycle+0x294>
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000018a:	4d76      	ldr	r5, [pc, #472]	; (20000364 <_hook_cycle+0x298>)
  const q31_t * y_e = y + frames;
  
  for (; y != y_e; ) {
    const float dist_mod = dist + lfoz * dist;
    
    float p = phase + linintf(dist_mod, 0.f, dist_mod * osc_sinf(phase));
2000018c:	eddf 8a73 	vldr	s17, [pc, #460]	; 2000035c <_hook_cycle+0x290>
    p = (p <= 0) ? 1.f - p : p - (uint32_t)p;

    const float sig  = osc_softclipf(0.05f, drive * osc_sinf(p1*p + p2*osc_sinf(p3*2.0*p)));
    *(y++) = f32_to_q31(sig);
20000190:	ed9f 1a75 	vldr	s2, [pc, #468]	; 20000368 <_hook_cycle+0x29c>
20000194:	eddf 1a75 	vldr	s3, [pc, #468]	; 2000036c <_hook_cycle+0x2a0>
  const float p2    = s_state.p2;
  const float p3    = s_state.p3;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
20000198:	ee87 2a87 	vdiv.f32	s4, s15, s14
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
2000019c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
200001a0:	462c      	mov	r4, r5
200001a2:	eef0 2a43 	vmov.f32	s5, s6
  
  for (; y != y_e; ) {
    const float dist_mod = dist + lfoz * dist;
    
    float p = phase + linintf(dist_mod, 0.f, dist_mod * osc_sinf(phase));
    p = (p <= 0) ? 1.f - p : p - (uint32_t)p;
200001a6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
200001aa:	eebf 9a00 	vmov.f32	s18, #240	; 0xbf800000 -1.0
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
  
  for (; y != y_e; ) {
200001ae:	4291      	cmp	r1, r2
200001b0:	f000 80c2 	beq.w	20000338 <_hook_cycle+0x26c>
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200001b4:	eefc 7ac6 	vcvt.u32.f32	s15, s12
    const float dist_mod = dist + lfoz * dist;
200001b8:	eef0 9a44 	vmov.f32	s19, s8
200001bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001c0:	eee5 9a04 	vfma.f32	s19, s10, s8
200001c4:	ee76 7a67 	vsub.f32	s15, s12, s15
200001c8:	ee67 7a83 	vmul.f32	s15, s15, s6
    const uint32_t x0p = (uint32_t)x0f;
200001cc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200001d0:	ee17 6a10 	vmov	r6, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
200001d4:	f006 007f 	and.w	r0, r6, #127	; 0x7f

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001d8:	ee06 6a90 	vmov	s13, r6
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200001dc:	eb05 0780 	add.w	r7, r5, r0, lsl #2
200001e0:	3001      	adds	r0, #1
200001e2:	eef8 6a66 	vcvt.f32.u32	s13, s13
200001e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
200001ea:	eb05 0080 	add.w	r0, r5, r0, lsl #2
200001ee:	ed97 7a00 	vldr	s14, [r7]
200001f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
200001f6:	edd0 6a00 	vldr	s13, [r0]
200001fa:	ee76 6ac7 	vsub.f32	s13, s13, s14
    return (x0p < k_wt_sine_size)?y0:-y0;
200001fe:	2e7f      	cmp	r6, #127	; 0x7f
20000200:	eea7 7aa6 	vfma.f32	s14, s15, s13
    
    float p = phase + linintf(dist_mod, 0.f, dist_mod * osc_sinf(phase));
20000204:	eef0 6a68 	vmov.f32	s13, s17
20000208:	eef0 7a47 	vmov.f32	s15, s14
2000020c:	bf88      	it	hi
2000020e:	eef1 7a47 	vneghi.f32	s15, s14
20000212:	ee69 7aa7 	vmul.f32	s15, s19, s15
20000216:	eee9 6aa7 	vfma.f32	s13, s19, s15
2000021a:	ee76 6a86 	vadd.f32	s13, s13, s12
    p = (p <= 0) ? 1.f - p : p - (uint32_t)p;
2000021e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
20000222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000226:	bf89      	itett	hi
20000228:	eebc 7ae6 	vcvthi.u32.f32	s14, s13
2000022c:	ee74 6ae6 	vsubls.f32	s13, s9, s13
20000230:	eeb8 7a47 	vcvthi.f32.u32	s14, s14
20000234:	ee76 6ac7 	vsubhi.f32	s13, s13, s14

    const float sig  = osc_softclipf(0.05f, drive * osc_sinf(p1*p + p2*osc_sinf(p3*2.0*p)));
20000238:	ee33 7aa3 	vadd.f32	s14, s7, s7
2000023c:	ee66 7a80 	vmul.f32	s15, s13, s0
20000240:	ee67 6a26 	vmul.f32	s13, s14, s13
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000244:	eebc 7ae6 	vcvt.u32.f32	s14, s13
20000248:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000024c:	ee36 7ac7 	vsub.f32	s14, s13, s14
20000250:	ee27 7a22 	vmul.f32	s14, s14, s5
    const uint32_t x0p = (uint32_t)x0f;
20000254:	eefc 6ac7 	vcvt.u32.f32	s13, s14
20000258:	ee16 6a90 	vmov	r6, s13

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000025c:	f006 007f 	and.w	r0, r6, #127	; 0x7f
20000260:	ee09 6a90 	vmov	s19, r6
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000264:	eb04 0780 	add.w	r7, r4, r0, lsl #2
20000268:	3001      	adds	r0, #1
2000026a:	eef8 9a69 	vcvt.f32.u32	s19, s19
2000026e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
20000272:	eb04 0080 	add.w	r0, r4, r0, lsl #2
20000276:	edd7 6a00 	vldr	s13, [r7]
2000027a:	ee37 7a69 	vsub.f32	s14, s14, s19
2000027e:	edd0 9a00 	vldr	s19, [r0]
20000282:	ee79 9ae6 	vsub.f32	s19, s19, s13
    return (x0p < k_wt_sine_size)?y0:-y0;
20000286:	2e7f      	cmp	r6, #127	; 0x7f
20000288:	eee7 6a29 	vfma.f32	s13, s14, s19
2000028c:	eeb0 7a66 	vmov.f32	s14, s13
20000290:	bf88      	it	hi
20000292:	eeb1 7a66 	vneghi.f32	s14, s13
20000296:	eee8 7a07 	vfma.f32	s15, s16, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000029a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000029e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200002a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
200002a6:	ee27 7a22 	vmul.f32	s14, s14, s5
    const uint32_t x0p = (uint32_t)x0f;
200002aa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
200002ae:	ee17 6a90 	vmov	r6, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
200002b2:	f006 007f 	and.w	r0, r6, #127	; 0x7f
200002b6:	ee06 6a90 	vmov	s13, r6
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200002ba:	eb04 0780 	add.w	r7, r4, r0, lsl #2
200002be:	3001      	adds	r0, #1
200002c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
200002c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
200002c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
200002cc:	edd7 7a00 	vldr	s15, [r7]
200002d0:	ee37 7a66 	vsub.f32	s14, s14, s13
200002d4:	edd0 6a00 	vldr	s13, [r0]
200002d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
    return (x0p < k_wt_sine_size)?y0:-y0;
200002dc:	2e7f      	cmp	r6, #127	; 0x7f
200002de:	eee7 7a26 	vfma.f32	s15, s14, s13
200002e2:	bf88      	it	hi
200002e4:	eef1 7a67 	vneghi.f32	s15, s15
200002e8:	ee60 7aa7 	vmul.f32	s15, s1, s15

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200002ec:	eef4 7ac9 	vcmpe.f32	s15, s18
200002f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002f4:	db07      	blt.n	20000306 <_hook_cycle+0x23a>
200002f6:	eef4 7ae4 	vcmpe.f32	s15, s9
200002fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002fe:	bfa8      	it	ge
20000300:	eef0 7a64 	vmovge.f32	s15, s9
20000304:	e001      	b.n	2000030a <_hook_cycle+0x23e>
20000306:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    *(y++) = f32_to_q31(sig);
2000030a:	ee27 7aa7 	vmul.f32	s14, s15, s15
    
    phase += w0;
2000030e:	ee36 6a25 	vadd.f32	s12, s12, s11
    
    float p = phase + linintf(dist_mod, 0.f, dist_mod * osc_sinf(phase));
    p = (p <= 0) ? 1.f - p : p - (uint32_t)p;

    const float sig  = osc_softclipf(0.05f, drive * osc_sinf(p1*p + p2*osc_sinf(p3*2.0*p)));
    *(y++) = f32_to_q31(sig);
20000312:	ee27 7ac7 	vnmul.f32	s14, s15, s14
    
    phase += w0;
    phase -= (uint32_t)phase;

    lfoz += lfo_inc;
20000316:	ee35 5a02 	vadd.f32	s10, s10, s4
    
    float p = phase + linintf(dist_mod, 0.f, dist_mod * osc_sinf(phase));
    p = (p <= 0) ? 1.f - p : p - (uint32_t)p;

    const float sig  = osc_softclipf(0.05f, drive * osc_sinf(p1*p + p2*osc_sinf(p3*2.0*p)));
    *(y++) = f32_to_q31(sig);
2000031a:	eee7 7a01 	vfma.f32	s15, s14, s2
2000031e:	ee67 7aa1 	vmul.f32	s15, s15, s3
20000322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
20000326:	ece1 7a01 	vstmia	r1!, {s15}
    
    phase += w0;
    phase -= (uint32_t)phase;
2000032a:	eefc 7ac6 	vcvt.u32.f32	s15, s12
2000032e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000332:	ee36 6a67 	vsub.f32	s12, s12, s15
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
  
  for (; y != y_e; ) {
20000336:	e73a      	b.n	200001ae <_hook_cycle+0xe2>
    lfoz += lfo_inc;
  }
  
  s_state.phase = phase;
  s_state.lfoz = lfoz;
}
20000338:	ecbd 8b04 	vpop	{d8-d9}
    phase -= (uint32_t)phase;

    lfoz += lfo_inc;
  }
  
  s_state.phase = phase;
2000033c:	ed83 6a01 	vstr	s12, [r3, #4]
  s_state.lfoz = lfoz;
20000340:	ed83 5a05 	vstr	s10, [r3, #20]
}
20000344:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000346:	bf00      	nop
20000348:	20000508 	.word	0x20000508
2000034c:	3b808081 	.word	0x3b808081
20000350:	0800f100 	.word	0x0800f100
20000354:	46b8ff49 	.word	0x46b8ff49
20000358:	37aec33e 	.word	0x37aec33e
2000035c:	00000000 	.word	0x00000000
20000360:	43800000 	.word	0x43800000
20000364:	08012bdc 	.word	0x08012bdc
20000368:	3d4ccccd 	.word	0x3d4ccccd
2000036c:	4f000000 	.word	0x4f000000

20000370 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t * const params)
{
  s_state.flags |= k_flag_reset;
20000370:	4a02      	ldr	r2, [pc, #8]	; (2000037c <_hook_on+0xc>)
20000372:	7e13      	ldrb	r3, [r2, #24]
20000374:	f043 0301 	orr.w	r3, r3, #1
20000378:	7613      	strb	r3, [r2, #24]
2000037a:	4770      	bx	lr
2000037c:	20000508 	.word	0x20000508

20000380 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t * const params)
{
20000380:	4770      	bx	lr

20000382 <_hook_param>:
  (void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value)
{
  const float valf = param_val_to_f32(value);
20000382:	ee07 1a90 	vmov	s15, r1
20000386:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 200004f0 <_hook_param+0x16e>
2000038a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000038e:	ee27 7a87 	vmul.f32	s14, s15, s14
  
  switch (index) {
20000392:	2807      	cmp	r0, #7
20000394:	f200 80ab 	bhi.w	200004ee <_hook_param+0x16c>
20000398:	e8df f000 	tbb	[pc, r0]
2000039c:	4f361d04 	.word	0x4f361d04
200003a0:	a29a8168 	.word	0xa29a8168
  case k_user_osc_param_id1:
    s_state.p1 = clip01f(value * 0.01f);
200003a4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 200004f4 <_hook_param+0x172>
200003a8:	ee67 7a87 	vmul.f32	s15, s15, s14
200003ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003b4:	db09      	blt.n	200003ca <_hook_param+0x48>
200003b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003ba:	eef4 7ac7 	vcmpe.f32	s15, s14
200003be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003c2:	bfa8      	it	ge
200003c4:	eef0 7a47 	vmovge.f32	s15, s14
200003c8:	e001      	b.n	200003ce <_hook_param+0x4c>
200003ca:	eddf 7a4b 	vldr	s15, [pc, #300]	; 200004f8 <_hook_param+0x176>
200003ce:	4b4b      	ldr	r3, [pc, #300]	; (200004fc <_hook_param+0x17a>)
200003d0:	edc3 7a07 	vstr	s15, [r3, #28]
    break;
200003d4:	4770      	bx	lr
  case k_user_osc_param_id2:
    s_state.p2 = clip01f(value * 0.01f);
200003d6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 200004f4 <_hook_param+0x172>
200003da:	ee67 7a87 	vmul.f32	s15, s15, s14
200003de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003e6:	db09      	blt.n	200003fc <_hook_param+0x7a>
200003e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003ec:	eef4 7ac7 	vcmpe.f32	s15, s14
200003f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003f4:	bfa8      	it	ge
200003f6:	eef0 7a47 	vmovge.f32	s15, s14
200003fa:	e001      	b.n	20000400 <_hook_param+0x7e>
200003fc:	eddf 7a3e 	vldr	s15, [pc, #248]	; 200004f8 <_hook_param+0x176>
20000400:	4b3e      	ldr	r3, [pc, #248]	; (200004fc <_hook_param+0x17a>)
20000402:	edc3 7a08 	vstr	s15, [r3, #32]
    break;
20000406:	4770      	bx	lr
  case k_user_osc_param_id3:
    s_state.p3 = clip01f(value * 0.01f);
20000408:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 200004f4 <_hook_param+0x172>
2000040c:	ee67 7a87 	vmul.f32	s15, s15, s14
20000410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000418:	db09      	blt.n	2000042e <_hook_param+0xac>
2000041a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000041e:	eef4 7ac7 	vcmpe.f32	s15, s14
20000422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000426:	bfa8      	it	ge
20000428:	eef0 7a47 	vmovge.f32	s15, s14
2000042c:	e001      	b.n	20000432 <_hook_param+0xb0>
2000042e:	eddf 7a32 	vldr	s15, [pc, #200]	; 200004f8 <_hook_param+0x176>
20000432:	4b32      	ldr	r3, [pc, #200]	; (200004fc <_hook_param+0x17a>)
20000434:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    break;
20000438:	4770      	bx	lr
  case k_user_osc_param_id4:
    s_state.p4 = clip01f(value * 0.01f);
2000043a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 200004f4 <_hook_param+0x172>
2000043e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000044a:	db09      	blt.n	20000460 <_hook_param+0xde>
2000044c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000450:	eef4 7ac7 	vcmpe.f32	s15, s14
20000454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000458:	bfa8      	it	ge
2000045a:	eef0 7a47 	vmovge.f32	s15, s14
2000045e:	e001      	b.n	20000464 <_hook_param+0xe2>
20000460:	eddf 7a25 	vldr	s15, [pc, #148]	; 200004f8 <_hook_param+0x176>
20000464:	4b25      	ldr	r3, [pc, #148]	; (200004fc <_hook_param+0x17a>)
20000466:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    break;
2000046a:	4770      	bx	lr
  case k_user_osc_param_id5:
    s_state.p5 = clip01f(value * 0.01f);
2000046c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 200004f4 <_hook_param+0x172>
20000470:	ee67 7a87 	vmul.f32	s15, s15, s14
20000474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000047c:	db09      	blt.n	20000492 <_hook_param+0x110>
2000047e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000482:	eef4 7ac7 	vcmpe.f32	s15, s14
20000486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000048a:	bfa8      	it	ge
2000048c:	eef0 7a47 	vmovge.f32	s15, s14
20000490:	e001      	b.n	20000496 <_hook_param+0x114>
20000492:	eddf 7a19 	vldr	s15, [pc, #100]	; 200004f8 <_hook_param+0x176>
20000496:	4b19      	ldr	r3, [pc, #100]	; (200004fc <_hook_param+0x17a>)
20000498:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    break;
2000049c:	4770      	bx	lr
  case k_user_osc_param_id6:
    s_state.p6 = clip01f(value * 0.01f);
2000049e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 200004f4 <_hook_param+0x172>
200004a2:	ee67 7a87 	vmul.f32	s15, s15, s14
200004a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200004aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004ae:	db09      	blt.n	200004c4 <_hook_param+0x142>
200004b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200004b4:	eef4 7ac7 	vcmpe.f32	s15, s14
200004b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004bc:	bfa8      	it	ge
200004be:	eef0 7a47 	vmovge.f32	s15, s14
200004c2:	e001      	b.n	200004c8 <_hook_param+0x146>
200004c4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 200004f8 <_hook_param+0x176>
200004c8:	4b0c      	ldr	r3, [pc, #48]	; (200004fc <_hook_param+0x17a>)
200004ca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    break;
200004ce:	4770      	bx	lr
  case k_user_osc_param_shape:
    s_state.dist = 0.3f * valf;
200004d0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 20000500 <_hook_param+0x17e>
200004d4:	4b09      	ldr	r3, [pc, #36]	; (200004fc <_hook_param+0x17a>)
200004d6:	ee27 7a27 	vmul.f32	s14, s14, s15
200004da:	ed83 7a03 	vstr	s14, [r3, #12]
    break;
200004de:	4770      	bx	lr
  case k_user_osc_param_shiftshape:
    s_state.drive = 1.f + valf; 
200004e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200004e4:	ee37 7a27 	vadd.f32	s14, s14, s15
200004e8:	4b04      	ldr	r3, [pc, #16]	; (200004fc <_hook_param+0x17a>)
200004ea:	ed83 7a02 	vstr	s14, [r3, #8]
200004ee:	4770      	bx	lr
200004f0:	3a802008 	.word	0x3a802008
200004f4:	3c23d70a 	.word	0x3c23d70a
200004f8:	00000000 	.word	0x00000000
200004fc:	20000508 	.word	0x20000508
20000500:	3e99999a 	.word	0x3e99999a
